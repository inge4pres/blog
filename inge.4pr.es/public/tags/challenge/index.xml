<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>challenge - Tag - INGE4PRES RATIONAL THOUGHTS</title>
        <link>https://inge.4pr.es/tags/challenge/</link>
        <description>challenge - Tag - INGE4PRES RATIONAL THOUGHTS</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sun, 24 Jan 2016 16:40:37 &#43;0000</lastBuildDate><atom:link href="https://inge.4pr.es/tags/challenge/" rel="self" type="application/rss+xml" /><item>
    <title>Implement a generic data list structure</title>
    <link>https://inge.4pr.es/post/2016-01-24-implement-a-generic-data-list-structure/</link>
    <pubDate>Sun, 24 Jan 2016 16:40:37 &#43;0000</pubDate>
    <author>inge4pres</author>
    <guid>https://inge.4pr.es/post/2016-01-24-implement-a-generic-data-list-structure/</guid>
    <description><![CDATA[As a coding challenge I was asked to provide a generic list implementation using a language of my choice and using only primitive types, avoiding the use of high level built-ins. I chose Go because I want to learn it and I know it can be useful to create an abstract, generic implementation.
The challenge request to implement at least 4 methods on the generic type:
 Filter() – returns a subset of the List satisfying an operation Map() – returns the List objects’ map Reverse() – reverse the ordering of the List objects FoldLeft() – join the objects from left to right using a join character  As a bonus question I was asked to code unit tests for the aforementioned methods and give an explanation on how the implementation guarantees concurrent access on resources.]]></description>
</item></channel>
</rss>
