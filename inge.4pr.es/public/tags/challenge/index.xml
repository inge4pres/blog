<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>challenge on INGE4PRES RATIONAL THOUGHTS</title>
    <link>https://inge.4pr.es/tags/challenge/</link>
    <description>Recent content in challenge on INGE4PRES RATIONAL THOUGHTS</description>
    <generator>Hugo -- gohugo.io</generator>
    <managingEditor>fgualazzi@gmail.com (Francesco Gualazzi)</managingEditor>
    <webMaster>fgualazzi@gmail.com (Francesco Gualazzi)</webMaster>
    <lastBuildDate>Sun, 24 Jan 2016 16:40:37 +0000</lastBuildDate><atom:link href="https://inge.4pr.es/tags/challenge/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Implement a generic data list structure</title>
      <link>https://inge.4pr.es/2016-01-24-implement-a-generic-data-list-structure/</link>
      <pubDate>Sun, 24 Jan 2016 16:40:37 +0000</pubDate>
      <author>fgualazzi@gmail.com (Francesco Gualazzi)</author>
      <guid>https://inge.4pr.es/2016-01-24-implement-a-generic-data-list-structure/</guid>
      <description>As a coding challenge I was asked to provide a generic list implementation using a language of my choice and using only primitive types, avoiding the use of high level built-ins. I chose Go because I want to learn it and I know it can be useful to create an abstract, generic implementation.
The challenge request to implement at least 4 methods on the generic type:
Filter() – returns a subset of the List satisfying an operation Map() – returns the List objects’ map Reverse() – reverse the ordering of the List objects FoldLeft() – join the objects from left to right using a join character As a bonus question I was asked to code unit tests for the aforementioned methods and give an explanation on how the implementation guarantees concurrent access on resources.</description>
    </item>
    
  </channel>
</rss>
