<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Development on inge4pres rational thoughts</title>
    <link>http://inge.4pr.es/tags/development/</link>
    <description>Recent content in Development on inge4pres rational thoughts</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 01 Oct 2017 21:31:52 +0200</lastBuildDate>
    
	<atom:link href="http://inge.4pr.es/tags/development/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Getting Started With Google Cloud Builder</title>
      <link>http://inge.4pr.es/2017/10/01/2017-10-01-getting-started-with-google-cloud-builder/</link>
      <pubDate>Sun, 01 Oct 2017 21:31:52 +0200</pubDate>
      
      <guid>http://inge.4pr.es/2017/10/01/2017-10-01-getting-started-with-google-cloud-builder/</guid>
      <description>One of the advantages of containerized applications is the standardization, some would say &amp;ldquo;write it once, runs everywhere&amp;rdquo; but that&amp;rsquo;s another motto for another product. Anyway with a new packaging technology the same problems are faced: build reproducibility, or the necessity for people doing Ops to know they are going to deploy the same exact piece of code the Dev team used in their tests. So to address this issue the container image needs to be immutable: once it&amp;rsquo;s built, it&amp;rsquo;s not going to be changed, ever.</description>
    </item>
    
    <item>
      <title>Golang Message Queue: a simple TCP message bus</title>
      <link>http://inge.4pr.es/2015/08/02/2015-08-02-golang-message-queue-a-simple-tcp-message-bus/</link>
      <pubDate>Sun, 02 Aug 2015 16:25:54 +0000</pubDate>
      
      <guid>http://inge.4pr.es/2015/08/02/2015-08-02-golang-message-queue-a-simple-tcp-message-bus/</guid>
      <description>[TL;DR]
I wrote a Pub/Sub message queue in Go, branch &amp;#8220;master&amp;#8221; is stable but missing some interesting feature like distributed memory synchronization between nodes in a cluster and encryption. Code at
https://github.com/inge4pres/gmq
Being a cloud system engineer, my work is to design and implement distributed systems: one of the key principles in designing such architectures is decoupling, which means ensuring the many parts composing the system are able to share informations and complete a sequence of operations without being tied together.</description>
    </item>
    
  </channel>
</rss>